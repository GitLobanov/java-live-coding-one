1. Написать URL api, которое выдаёт перечень всех кредитов пользователя            
2. Написать URL api для получения деталей конкретного кредита            
3. Написать URL api с фильтрацией кредита по типу кредита + по дате гашения            
4. Написать URL api для получения пени для конкретного кредита

@Getter
@Setter
@Entity
@Table(name = "route", schema = "rm")
public class Route {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(schema = "rm", name = "route_x_kafka_address",
    joinColumns = @JoinColumn(name = "route_id", referencedColumnName = "id"),
        inverseJoinColumns = @JoinColumn(name = "kafka_address_id", referencedColumnName = "id")
    )
    private Set<KafkaAddress> kafkaAddresses;

}



@Service

@RequiredArgsConstructor

public class RouteService {

    private final RouteRepository repository;


    public boolean isRouteHasEmptyKafkaAddress(int routeId) {

        Route route = repository.findById(routeId)

            .orElseThrow(() -> new NotFoundException("Route not found"));

        Set<KafkaAddress> kafkaAddresses = route.getKafkaAddresses();

        return kafkaAddresses.isEmpty();

    }

}

тут короче потоки будут бороться за поле, волотайл или Атомики (нужно указывать какие методы бы использовал)

public class StopThreadTest {

private static Boolean stopRequested;

public static void main(String[] args) throws Exception {

    Thread backgroundThread = new Thread(() -> {

        int i = 0;

        while (!stopRequested) {

            i++;

        }

    });

    backgroundThread.start();
    TimeUnit.SECONDS.sleep(1);
    stopRequested = true;


    }

}


--- Что в коде может пойти не так? Именно при отправки в кафку, и какие есть подходы
- Dead letter que
- Или складывать операции в outbox и проходить шедулером

@Getter

@Setter

@Entity

@Table(name = "route", schema = "rm")

public class Route {

    @Id

    @GeneratedValue(strategy = GenerationType.IDENTITY)

    private Integer id;

    @ManyToMany(fetch = FetchType.LAZY)

    @JoinTable(schema = "rm", name = "route_x_kafka_address",

    joinColumns = @JoinColumn(name = "route_id", referencedColumnName = "id"),

        inverseJoinColumns = @JoinColumn(name = "kafka_address_id", referencedColumnName = "id")

    )

    private Set<KafkaAddress> kafkaAddresses;

}



@Service

@RequiredArgsConstructor

public class RouteService {

    private final RouteRepository repository;


    public boolean isRouteHasEmptyKafkaAddress(int routeId) {

        Route route = repository.findById(routeId)

            .orElseThrow(() -> new NotFoundException("Route not found"));

        Set<KafkaAddress> kafkaAddresses = route.getKafkaAddresses();

        return kafkaAddresses.isEmpty();

    }

}

Провести ревью кода:

/**
 *  Задача - начислить всем работникам, которые провели за последний период больше 50-ти интервью бонус в 15% от ЗП,
 *  а тем, кто провел больше 100 - 30%. И отправить каждому сообщение.
 */
@Component
public class EmployeeService {

    @Autowired
    private final EmployeeRepository repository;
    @Autowired
    private final PaymentService paymentService;
    private final NotificationClient client = new NotificationClient();

    @Transactional
    public void updateAll() throws NotificationClientIOException {
        try {
            repository.findAll().forEach(emp -> update(emp.getId()));
        } catch (Throwable t) {
            //do nothing
        }
    }

    @Transactional(isolation = Isolation.SERIALIZABLE, propagation = Propagation.REQUIRES_NEW)
    private void update(Long id) throws NotificationClientIOException {
        Employee employee = repository.findById(id).get();
        if (employee.interviewsLastPeriod > 50) {
            double bonus = 0.15 * employee.salary.getAmount();
            paymentService.processPayment(bonus, id);
            client.send(id)

;
        }
        if (employee.interviewsLastPeriod > 100) {
            double bonus = 0.3 * employee.salary.getAmount();
            paymentService.processPayment(bonus, id);
            client.send(id)

;
        }
        System.out.println("Finished transaction for employee");
    }

    @Data
    @Entity
    class Employee {

        private final int interviewsLastPeriod;
        @ManyToOne
        private final Salary salary;

        public Employee(int interviewsLastPeriod, Salary salary) {
            this.interviewsLastPeriod = interviewsLastPeriod;
            this.salary = salary;
        }
    }
}

@Component
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class PaymentService {
    //...//
    public void processPayment(double amount, Long id) {
        //...//
    }
}

